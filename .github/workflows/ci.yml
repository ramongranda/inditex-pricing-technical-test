name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    env:
      SONAR_URL: https://sonarcloud.io
      SONAR_ORG: ${{ secrets.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # útil para blame en Sonar

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Build reactor (compile + test)
        run: mvn -B -fae clean verify

      - name: PIT (mutation testing)
        run: |
          mvn -B -fae -Pmutation-testing verify \
            -DskipTests=false \
            -Dthreads=4 -DwithHistory=true

      - name: Convert PIT → Sonar generic issues
        run: scripts/pit-to-sonar-json.sh

      - name: Upload PIT HTML reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pit-reports
          path: "**/target/pit-reports/**"
          if-no-files-found: ignore

      - name: Build mutation badge (Shields endpoint)
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET, json, os, math
          from pathlib import Path
          
          # Busca el primer mutations.xml (ajústalo si quieres agregación)
          reports = list(Path(".").rglob("target/pit-reports/**/mutations.xml")) + \
                    list(Path(".").rglob("target/pit-reports/mutations.xml"))
          if not reports:
              score = 0.0
          else:
              killed = survived = nocov = 0
              for rpt in reports:
                  root = ET.parse(rpt).getroot()
                  for m in root.findall(".//mutation"):
                      st = (m.get("status") or "").upper()
                      if st == "KILLED": killed += 1
                      elif st == "SURVIVED": survived += 1
                      elif st == "NO_COVERAGE": nocov += 1
              total = killed + survived + nocov
              score = (100.0 * killed / total) if total else 0.0
          
          # Colores por umbrales
          def color(p):
              return ("red" if p < 40 else
                      "orange" if p < 60 else
                      "yellow" if p < 75 else
                      "yellowgreen" if p < 85 else
                      "green")
          
          data = {
            "schemaVersion": 1,
            "label": "mutation",
            "message": f"{score:.1f}%",
            "color": color(score)
          }
          os.makedirs("badges", exist_ok=True)
          with open("badges/mutation.json", "w") as f:
              json.dump(data, f)
          print(data)
          PY

      - name: Commit badge endpoint
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): update PIT mutation badge"
          file_pattern: badges/mutation.json


      - name: SonarCloud Analysis
        if: env.SONAR_TOKEN != '' && (github.event_name == 'push' || github.event_name == 'pull_request')
        run: |
          RPT="$(pwd)/jacoco-report-aggregate/target/site/jacoco-aggregate/jacoco.xml"
          echo "RPT=$RPT"
          mvn -B sonar:sonar \
          -Dsonar.organization="${SONAR_ORG}" \
          -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
          -Dsonar.host.url="${SONAR_URL}" \
          -Dsonar.token="${SONAR_TOKEN}" \
          -Dsonar.coverage.jacoco.xmlReportPaths="$RPT" \
          -Dsonar.verbose=true


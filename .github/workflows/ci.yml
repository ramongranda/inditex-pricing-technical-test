name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: write        # <-- required to commit the badge
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    env:
      SONAR_URL: https://sonarcloud.io
      SONAR_ORG: ${{ secrets.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Build reactor (compile + test)
        run: mvn -B -fae clean verify

      - name: PIT (mutation testing)
        run: |
          mvn -B -fae -Pmutation-testing verify \
            -DskipTests=false \
            -Dthreads=4 -DwithHistory=true

      - name: Convert PIT â†’ Sonar generic issues
        run: scripts/pit-to-sonar-json.sh

      # ===== MUTATION badge (Shields endpoint) =====
      - name: Build mutation badge (Shields endpoint)
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET, json
          from pathlib import Path

          reports = list(Path(".").rglob("target/pit-reports/**/mutations.xml")) + \
                    list(Path(".").rglob("target/pit-reports/mutations.xml"))

          killed = survived = nocov = 0
          for rpt in reports:
              root = ET.parse(rpt).getroot()
              for m in root.findall(".//mutation"):
                  st = (m.get("status") or "").upper()
                  if st == "KILLED": killed += 1
                  elif st == "SURVIVED": survived += 1
                  elif st == "NO_COVERAGE": nocov += 1

          total = killed + survived + nocov
          score = (100.0 * killed / total) if total else 0.0

          def color(p):
              return ("red" if p < 40 else
                      "orange" if p < 60 else
                      "yellow" if p < 75 else
                      "yellowgreen" if p < 85 else
                      "green")

          data = {
            "schemaVersion": 1,
            "label": "mutation",
            "message": f"{score:.1f}%",
            "color": color(score)
          }
          Path("badges").mkdir(exist_ok=True)
          Path("badges/mutation.json").write_text(json.dumps(data))
          print(data)
          PY

      - name: Commit mutation badge
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): update PIT mutation badge"
          file_pattern: badges/mutation.json

      # (Optional) upload PIT HTML reports as artifact
      - name: Upload PIT HTML reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pit-reports
          path: "**/target/pit-reports/**"
          if-no-files-found: ignore

      - name: SonarCloud Analysis
        if: env.SONAR_TOKEN != '' && (github.event_name == 'push' || github.event_name == 'pull_request')
        run: |
          RPT="$(pwd)/jacoco-report-aggregate/target/site/jacoco-aggregate/jacoco.xml"
          echo "RPT=$RPT"
          mvn -B sonar:sonar \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dsonar.host.url="${SONAR_URL}" \
            -Dsonar.token="${SONAR_TOKEN}" \
            -Dsonar.coverage.jacoco.xmlReportPaths="$RPT" \
            -Dsonar.externalIssuesReportPaths="external-issues.json" \
            -Dsonar.verbose=true

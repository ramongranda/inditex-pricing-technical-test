name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: write          # writes mutation badge
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest
    env:
      SONAR_URL: https://sonarcloud.io
      SONAR_ORG: ${{ secrets.SONAR_ORG }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Build reactor (compile + test)
        run: mvn -B -fae clean verify

      - name: Inspect classes & execs
        run: |
          echo "== CLASSES =="; find . -type d -path '*/target/classes' -maxdepth 0 -print | sed 's|^|  |'
          echo "== TEST-CLASSES =="; find . -type d -path '*/target/test-classes' -maxdepth 0 -print | sed 's|^|  |'
          echo "== JACOCO .exec FILES (size) =="; find . -name 'jacoco*.exec' -printf '%10s  %p\n' | sort -nr | head -n 50 || true

      - name: Check JaCoCo aggregate
        run: |
          ls -lh jacoco-report-aggregate/target/site/jacoco-aggregate/jacoco.xml || true
          ls -lh target/site/jacoco-aggregate/jacoco.xml || true

      # --- PIT in code modules (mutation-testing profile) ---
      - name: PIT (mutation testing)
        run: |
          mvn -B -fae -Pmutation-testing verify \
            -DskipTests=false \
            -Dthreads=4 -DwithHistory=true

      # --- Convert PIT → Sonar generic issues ---
      - name: Convert PIT → Sonar generic issues
        run: scripts/pit-to-sonar-json.sh

      - name: Validate external-issues.json
        run: |
          python - <<'PY'
          import json; json.load(open("external-issues.json")); print("external-issues.json OK")
          PY
          head -n 20 external-issues.json

      # --- Mutation badge (Shields endpoint) ---
      - name: Build mutation badge (Shields endpoint JSON)
        run: |
          python - <<'PY'
          import xml.etree.ElementTree as ET, json
          from pathlib import Path
          reports = list(Path(".").rglob("target/pit-reports/**/mutations.xml")) + list(Path(".").rglob("target/pit-reports/mutations.xml"))
          killed=survived=nocov=0
          for rpt in reports:
              root = ET.parse(rpt).getroot()
              for m in root.findall(".//mutation"):
                  st = (m.get("status") or "").upper()
                  if st=="KILLED": killed+=1
                  elif st=="SURVIVED": survived+=1
                  elif st=="NO_COVERAGE": nocov+=1
          total = killed+survived+nocov
          score = (100.0*killed/total) if total else 0.0
          def color(p): return ("red" if p<40 else "orange" if p<60 else "yellow" if p<75 else "yellowgreen" if p<85 else "green")
          data = {"schemaVersion":1,"label":"mutation","message":f"{score:.1f}%","color":color(score)}
          Path("badges").mkdir(exist_ok=True)
          Path("badges/mutation.json").write_text(json.dumps(data))
          print(data)
          PY

      - name: Commit mutation badge
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): update PIT mutation badge"
          file_pattern: badges/mutation.json

      # (Optional) upload PIT HTML reports
      - name: Upload PIT HTML reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pit-reports
          path: "**/target/pit-reports/**"
          if-no-files-found: ignore

      # --- SonarCloud ---
      - name: SonarCloud Analysis
        if: env.SONAR_TOKEN != '' && (github.event_name == 'push' || github.event_name == 'pull_request')
        run: |
          RPT="$(pwd)/jacoco-report-aggregate/target/site/jacoco-aggregate/jacoco.xml"
          EXT="$(pwd)/external-issues.json"
          echo "RPT=$RPT"
          echo "EXT=$EXT"
          mvn -B sonar:sonar \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dsonar.host.url="${SONAR_URL}" \
            -Dsonar.token="${SONAR_TOKEN}" \
            -Dsonar.coverage.jacoco.xmlReportPaths="$RPT" \
            -Dsonar.externalIssuesReportPaths="$EXT" \
            -Dsonar.verbose=true

  # --- E2E with Postman/Newman, starting the app with docker-compose ---
  postman-tests:
    permissions:
      contents: write
      pull-requests: write
      checks: write
    runs-on: ubuntu-latest
    needs: build-test-sonar   # remove if you want parallel execution
    steps:
      - uses: actions/checkout@v4

      - name: Start app (docker compose)
        run: |
          docker compose up -d
          # wait until service is UP
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
              echo "Service UP"; exit 0
            fi
            sleep 2
          done
          echo "Service NOT healthy"; docker compose logs --no-color || true; exit 1

      - name: Install Newman
        run: npm i -g newman newman-reporter-htmlextra

      - name: Create Postman env (localhost)
        run: |
          mkdir -p postman
          cat > postman/_env.ci.json <<'EOF'
          { "name": "ci",
            "values": [ { "key": "baseUrl", "value": "http://localhost:8080", "enabled": true } ]
          }
          EOF
          cat postman/_env.ci.json

      - name: Run Postman (Newman)
        run: |
          mkdir -p reports
          newman run postman/collection.json \
            -e postman/_env.ci.json \
            -d postman/data.json \
            --reporters cli,junit,htmlextra \
            --reporter-junit-export reports/junit.xml \
            --reporter-htmlextra-export reports/report.html

      - name: Upload Newman reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-reports
          path: reports/

      - name: Publish JUnit summary
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: reports/junit.xml
          check_name: "Postman E2E"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: true
          require_tests: true

